// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// FOS
Rcpp::List FOS(const Rcpp::NumericMatrix& X, const Rcpp::NumericVector& Y, const std::string solver_type, const bool use_single_precision);
RcppExport SEXP HDIM_FOS(SEXP XSEXP, SEXP YSEXP, SEXP solver_typeSEXP, SEXP use_single_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const std::string >::type solver_type(solver_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_single_precision(use_single_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(FOS(X, Y, solver_type, use_single_precision));
    return rcpp_result_gen;
END_RCPP
}
// CoordinateDescent
Rcpp::NumericVector CoordinateDescent(Rcpp::NumericMatrix& X, Rcpp::NumericVector& Y, Rcpp::NumericVector& Beta_0, const double Lambda, SEXP convergence_criteria, const bool use_screening_rules, const bool use_single_precision);
RcppExport SEXP HDIM_CoordinateDescent(SEXP XSEXP, SEXP YSEXP, SEXP Beta_0SEXP, SEXP LambdaSEXP, SEXP convergence_criteriaSEXP, SEXP use_screening_rulesSEXP, SEXP use_single_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type Beta_0(Beta_0SEXP);
    Rcpp::traits::input_parameter< const double >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type convergence_criteria(convergence_criteriaSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_screening_rules(use_screening_rulesSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_single_precision(use_single_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(CoordinateDescent(X, Y, Beta_0, Lambda, convergence_criteria, use_screening_rules, use_single_precision));
    return rcpp_result_gen;
END_RCPP
}
// ISTA
Rcpp::NumericVector ISTA(const Rcpp::NumericMatrix X, const Rcpp::NumericVector Y, const Rcpp::NumericVector Beta_0, const double Lambda, const SEXP convergence_criteria, const double L_0, const bool use_screening_rules, const bool use_single_precision);
RcppExport SEXP HDIM_ISTA(SEXP XSEXP, SEXP YSEXP, SEXP Beta_0SEXP, SEXP LambdaSEXP, SEXP convergence_criteriaSEXP, SEXP L_0SEXP, SEXP use_screening_rulesSEXP, SEXP use_single_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type Beta_0(Beta_0SEXP);
    Rcpp::traits::input_parameter< const double >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type convergence_criteria(convergence_criteriaSEXP);
    Rcpp::traits::input_parameter< const double >::type L_0(L_0SEXP);
    Rcpp::traits::input_parameter< const bool >::type use_screening_rules(use_screening_rulesSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_single_precision(use_single_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(ISTA(X, Y, Beta_0, Lambda, convergence_criteria, L_0, use_screening_rules, use_single_precision));
    return rcpp_result_gen;
END_RCPP
}
// FISTA
Rcpp::NumericVector FISTA(const Rcpp::NumericMatrix X, const Rcpp::NumericVector Y, const Rcpp::NumericVector Beta_0, const double Lambda, const SEXP convergence_criteria, const double L_0, const bool use_screening_rules, const bool use_single_precision);
RcppExport SEXP HDIM_FISTA(SEXP XSEXP, SEXP YSEXP, SEXP Beta_0SEXP, SEXP LambdaSEXP, SEXP convergence_criteriaSEXP, SEXP L_0SEXP, SEXP use_screening_rulesSEXP, SEXP use_single_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type Beta_0(Beta_0SEXP);
    Rcpp::traits::input_parameter< const double >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type convergence_criteria(convergence_criteriaSEXP);
    Rcpp::traits::input_parameter< const double >::type L_0(L_0SEXP);
    Rcpp::traits::input_parameter< const bool >::type use_screening_rules(use_screening_rulesSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_single_precision(use_single_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(FISTA(X, Y, Beta_0, Lambda, convergence_criteria, L_0, use_screening_rules, use_single_precision));
    return rcpp_result_gen;
END_RCPP
}
